{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedUserId","useState","filterByTitle","setFilterByTitle","isComplete","setIsComplete","visibleTodos","setVisibleTodos","useEffect","filter","todo","titleToLower","title","toLowerCase","filterByTitleToLower","includes","completed","className","type","value","onChange","target","name","map","item","checked","readOnly","userId","onClick","id","BASE_URL","getTodosFromServer","a","fetch","response","json","message","Error","getUserFromServer","users","CurrentUser","React","memo","clearUser","currentUser","setCurrentUser","isLoadingError","setLoadingError","then","receiveUserId","catch","fetchError","email","phone","App","selectedUserId","setTodos","error","setError","useCallback","receiveTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30269582.chunk.js","sourcesContent":["import { Dispatch, useEffect, useState } from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todos: Todo[];\n  setSelectedUserId: Dispatch<number>;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, setSelectedUserId }) => {\n  const [filterByTitle, setFilterByTitle] = useState<string>('');\n  const [isComplete, setIsComplete] = useState('show all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  useEffect(() => {\n    setVisibleTodos(\n      todos.filter((todo) => {\n        const titleToLower = todo.title.toLowerCase();\n        const filterByTitleToLower = filterByTitle.toLowerCase();\n\n        switch (isComplete) {\n          case 'show all':\n            return titleToLower.includes(filterByTitleToLower);\n\n          case 'not completed':\n            return (\n              titleToLower.includes(filterByTitleToLower)\n              && todo.completed === false\n            );\n\n          case 'completed':\n            return (\n              titleToLower.includes(filterByTitleToLower)\n              && todo.completed === true\n            );\n\n          default:\n            return todo;\n        }\n      }),\n    );\n  }, [filterByTitle, isComplete, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__sort\">\n        <label className=\"TodoList__label\">\n          Sort by title:\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={filterByTitle}\n            onChange={({ target }) => {\n              setFilterByTitle(target.value);\n            }}\n          />\n        </label>\n\n        <label className=\"TodoList__label\">\n          Sort by status:\n          <select\n            className=\"TodoList__input\"\n            name=\"isCompleted\"\n            onChange={({ target }) => {\n              setIsComplete(target.value);\n            }}\n          >\n            <option value=\"show all\">Show all</option>\n\n            <option value=\"not completed\">Not completed</option>\n\n            <option value=\"completed\">Completed</option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map((item) => {\n            return (\n              <li\n                key={item.id}\n                className={`TodoList__item\n                  TodoList__item--${item.completed ? 'checked' : 'unchecked'}`}\n              >\n                <label>\n                  <input checked={item.completed} type=\"checkbox\" readOnly />\n                  <p>{item.title}</p>\n                </label>\n\n                {item.userId && (\n                  <button\n                    className=\"\n                    TodoList__user-button\n                    button\"\n                    type=\"button\"\n                    onClick={() => setSelectedUserId(item.userId)}\n                  >\n                    User&nbsp;#\n                    {item.userId}\n                  </button>\n                )}\n\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { User } from './Types/User';\nimport { Todo } from './Types/Todo';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodosFromServer = async (): Promise<Todo[]> => {\n  try {\n    const response = await fetch(`${BASE_URL}/todos`);\n    const todos = await response.json();\n\n    return todos;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Now you cannot connect the server and get todos');\n    } else {\n      throw error;\n    }\n  }\n};\n\nexport const getUserFromServer = async (id: number): Promise<User> => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/${id}`);\n    const users = await response.json();\n\n    return users;\n  } catch (error) {\n    if (\n      error\n      && typeof error === 'object'\n      && (error as Error).message === 'Failed to fetch'\n    ) {\n      throw new Error('Cannot connect the server and get users');\n    } else {\n      throw error;\n    }\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { getUserFromServer } from '../../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = React.memo(({\n  userId,\n  clearUser,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoadingError, setLoadingError] = useState(null);\n\n  useEffect(() => {\n    const newUser = getUserFromServer(userId);\n\n    newUser\n      .then((receiveUserId) => {\n        setCurrentUser(receiveUserId);\n        setLoadingError(null);\n      })\n      .catch((fetchError) => {\n        setCurrentUser(null);\n        setLoadingError(fetchError.message);\n      });\n  });\n\n  // const getUser = useCallback(async () => {\n  //   try {\n  //     const newUser = await getUserFromServer(userId);\n\n  //     setLoadingError(false);\n  //     setCurrentUser(newUser);\n  //   } catch {\n  //     setCurrentUser(null);\n  //     setLoadingError(true);\n  //   }\n  // }, [userId]);\n\n  // useEffect(() => {\n  //   getUser();\n  // }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {isLoadingError && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Please, try again: server cannot find user\n            </span>\n          </h2>\n        </div>\n      )}\n    </>\n  );\n});\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosFromServer } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState<null | number>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [error, setError] = useState<null | string>(null);\n\n  const clearUser = useCallback(() => {\n    setSelectedUserId(null);\n  }, []);\n\n  useEffect(() => {\n    const receiveTodosPromise = getTodosFromServer();\n\n    receiveTodosPromise\n      .then((receiveTodos) => {\n        setTodos(receiveTodos);\n      })\n      .catch((fetchError) => {\n        setError(fetchError.message);\n        setTodos([]);\n      });\n  });\n\n  useEffect(() => {\n    setTodos([]);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {error ? (\n        <h1 className=\"App__error\">{error}</h1>\n      ) : (\n        <>\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              setSelectedUserId={setSelectedUserId}\n            />\n          </div>\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser\n                  userId={selectedUserId}\n                  clearUser={clearUser}\n                />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}